# 3.	Осуществить программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и округление до целого числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять,
# только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order()
# вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.


class Cell:

    def __init__(self, nucleus):
        self.nucleus = int(nucleus)
        self.row = 5  # количество ячеек в ряду (чтобы можно было менять в 1-ом месте)

    def __add__(self, other):
        return Cell(self.nucleus + other.nucleus)

    def __sub__(self, other):
        if self.nucleus >= other.nucleus:
            return Cell(self.nucleus - other.nucleus)
        else:
            raise IndexError('Разность количества клеток меньше 0')

    def __mul__(self, other):
        return Cell(self.nucleus * other.nucleus)

    def __floordiv__(self, other):
        return Cell(self.nucleus // other.nucleus)

    def __str__(self):
        return f'Количество ячеек в новой клетке = {self.nucleus}'

    @property
    def make_order(self):
        copy_nucleus = self.nucleus
        rows = ''
        while copy_nucleus >= self.row:
            one_line = f"{'*' * self.row}\n"
            rows += one_line
            copy_nucleus -= self.row
            if copy_nucleus < self.row:
                last_line = f'{"*" * copy_nucleus}'
                rows += last_line
        return rows


member_1 = Cell(15)
member_2 = Cell(7)

print(member_1 + member_2)
print(member_1 - member_2)
print(member_1 * member_2)
print(member_1 // member_2)

print(member_1.make_order)
print(member_2.make_order)
print(member_2 - member_1)
